package gracefulsoul.problems;

import java.util.Arrays;

public class MinimizeMalwareSpread {

	// https://leetcode.com/problems/minimize-malware-spread/submissions/954270869/
	public static void main(String[] args) {
		MinimizeMalwareSpread test = new MinimizeMalwareSpread();
		System.out.println(test.minMalwareSpread(new int[][] {
			{ 1, 1, 0 },
			{ 1, 1, 0 },
			{ 0, 0, 1 }
		}, new int[] { 0, 1 }));
		System.out.println(test.minMalwareSpread(new int[][] {
			{ 1, 0, 0 },
			{ 0, 1, 0 },
			{ 0, 0, 1 }
		}, new int[] { 0, 2 }));
		System.out.println(test.minMalwareSpread(new int[][] {
			{ 1, 1, 1 },
			{ 1, 1, 1 },
			{ 1, 1, 1 }
		}, new int[] { 1, 2 }));
	}

	public int minMalwareSpread(int[][] graph, int[] initial) {
		Arrays.sort(initial);
		int length = graph.length;
		int result = initial[0];
		int max = 0;
		boolean[] init = new boolean[length];
		for (int initialInfected : initial) {
			init[initialInfected] = true;
		}
		for (int initialInfected : initial) {
			init[initialInfected] = false;
			int count = this.getSpreadCount(graph, init, new boolean[length], initialInfected);
			if (count > max) {
				max = count;
				result = initialInfected;
			}
			init[initialInfected] = true;
		}
		return result;
	}

	private int getSpreadCount(int[][] graph, boolean[] initial, boolean[] visited, int initialInfected) {
		if (initial[initialInfected]) {
			return 0;
		}
		visited[initialInfected] = true;
		int count = 1;
		for (int i = 0; i < graph[initialInfected].length; i++) {
			if (!visited[i] && graph[initialInfected][i] == 1) {
				int spreadCount = this.getSpreadCount(graph, initial, visited, i);
				if (spreadCount == 0) {
					return 0;
				}
				count += spreadCount;
			}
		}
		return count;
	}

}
