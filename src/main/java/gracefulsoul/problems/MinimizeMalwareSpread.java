package gracefulsoul.problems;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class MinimizeMalwareSpread {

	public static void main(String[] args) {
		MinimizeMalwareSpread test = new MinimizeMalwareSpread();
		System.out.println(test.minMalwareSpread(new int[][] {
			{ 1, 1, 0 },
			{ 1, 1, 0 },
			{ 0, 0, 1 }
		}, new int[] { 0, 1 }));
		System.out.println(test.minMalwareSpread(new int[][] {
			{ 1, 0, 0 },
			{ 0, 1, 0 },
			{ 0, 0, 1 }
		}, new int[] { 0, 2 }));
		System.out.println(test.minMalwareSpread(new int[][] {
			{ 1, 1, 1 },
			{ 1, 1, 1 },
			{ 1, 1, 1 }
		}, new int[] { 1, 2 }));
	}

	public int minMalwareSpread(int[][] graph, int[] initial) {
		Set<Integer> infected = new HashSet<>();
		for (int initialInfected : initial) {
			infected.add(initialInfected);
		}
		int min = Integer.MAX_VALUE;
		int result = 0;
		for (int i = 0; i < initial.length; i++) {
			int ignore = initial[i];
			infected.remove(ignore);
			int count = this.getSpreadCount(graph, infected);
			if (count < min || (count == min && initial[i] < result)) {
				result = initial[i];
				min = count;
			}
			infected.add(ignore);
		}
		return result;
	}

	private int getSpreadCount(int[][] graph, Set<Integer> infected) {
		Set<Integer> set = new HashSet<>(infected);
		Queue<Integer> bfs = new LinkedList<>();
		for (Integer initialInfected : infected) {
			bfs.add(initialInfected);
		}
		while (!bfs.isEmpty()) {
			Integer next = bfs.remove();
			for (int j = 0; j < graph[next].length; ++j) {
				if (graph[next][j] == 1 && !set.contains(j)) {
					set.add(j);
					bfs.add(j);
				}
			}
		}
		return set.size();
	}

}
